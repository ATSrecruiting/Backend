name: Deploy Backend to EC2

# Trigger the workflow on pushes to the main branch
on:
  push:
    branches:
      - main # Or your primary branch (e.g., master)

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest # Use the latest Ubuntu runner

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        # Useful for cross-platform builds if needed later

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          # Use the GitHub Actor (username) associated with the PAT
          username: ${{ github.actor }}
          # Use a Personal Access Token (PAT) with packages read/write scope stored as a secret
          password: ${{ secrets.GHCR_PAT }} 

      - name: Build and push Docker image
        id: build-push
        uses: docker/build-push-action@v5
        with:
          context: . # Assumes Dockerfile is in the root directory
          file: ./Dockerfile # Explicit path to your Dockerfile
          push: true
          # Ensure the image name matches what's used in the deploy script
          # ghcr.io/OWNER/REPO:latest (lowercase is enforced by GHCR)
          tags: ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}:latest
          cache-from: type=gha # Enable build cache from GitHub Actions cache
          cache-to: type=gha,mode=max # Write build cache to GitHub Actions cache

      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.0.3 # Use a specific version tag
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            # --- Deployment Script on EC2 ---

            # Variables
            # Define image name using variables substituted by GitHub Actions
            # IMPORTANT: Ensure this matches the 'tags:' field in the build step
            IMAGE_NAME="ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}:latest" # FIXED: Removed ,,
            CONTAINER_NAME="atsBackend"
            # Define where the .env file should be placed on the EC2 instance
            ENV_FILE_PATH="/home/${{ secrets.EC2_USERNAME }}/app.env" # Ensure this user has write permission or adjust

            echo "--- Logging into GHCR on EC2 ---"
            # Use the PAT stored in secrets for authentication on the EC2 instance
            echo ${{ secrets.GHCR_PAT }} | sudo docker login ghcr.io -u ${{ github.actor }} --password-stdin

            echo "--- Stopping existing container ($CONTAINER_NAME) ---"
            # Stop the container if it exists, ignore error if it doesn't
            sudo docker stop $CONTAINER_NAME || true

            echo "--- Removing existing container ($CONTAINER_NAME) ---"
            # Remove the container if it exists, ignore error if it doesn't
            sudo docker rm $CONTAINER_NAME || true

            echo "--- Pulling latest image ($IMAGE_NAME) ---"
            sudo docker pull $IMAGE_NAME

            echo "--- Creating environment file ($ENV_FILE_PATH) ---"
            # Use 'cat <<EOF' to handle multi-line secrets properly
            # Ensure the target directory exists and has correct permissions if needed
            # sudo mkdir -p $(dirname $ENV_FILE_PATH)
            # sudo chown ${{ secrets.EC2_USERNAME }}:${{ secrets.EC2_USERNAME }} $(dirname $ENV_FILE_PATH)
            cat <<EOF | sudo tee $ENV_FILE_PATH > /dev/null
            ${{ secrets.ENV_FILE_CONTENT }}
            EOF
            # Secure the .env file permissions
            sudo chmod 600 $ENV_FILE_PATH

            echo "--- Running new container ($CONTAINER_NAME) ---"
            sudo docker run -d \
              -p 8000:8000 \
              --name $CONTAINER_NAME \
              --env-file $ENV_FILE_PATH \
              $IMAGE_NAME

            echo "--- Deployment complete ---"

            # Optional: Clean up unused Docker images to save space
            echo "--- Cleaning up dangling images ---"
            sudo docker image prune -f